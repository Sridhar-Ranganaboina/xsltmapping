import threading
import time
import win32event
import win32service
import win32serviceutil

class EmailItem:
    def __init__(self, item_id, mail_box, change_key):
        self.item_id = item_id
        self.mail_box = mail_box
        self.change_key = change_key

    def __repr__(self):
        return f"EmailItem(item_id={self.item_id}, mail_box={self.mail_box}, change_key={self.change_key})"

class MyService(win32serviceutil.ServiceFramework):
    _svc_name_ = "MyService"
    _svc_display_name_ = "My Python Service"
    _svc_description_ = "This service runs two tasks at different time intervals."

    def __init__(self, args):
        win32serviceutil.ServiceFramework.__init__(self, args)
        self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)
        self.stop_requested = False
        self.shared_list = []
        self.lock = threading.Lock()

    def SvcStop(self):
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        win32event.SetEvent(self.hWaitStop)
        self.stop_requested = True

    def SvcDoRun(self):
        self.main()

    def task1(self):
        while not self.stop_requested:
            with self.lock:
                item = EmailItem(item_id="1", mail_box="inbox", change_key="abc123")
                self.shared_list.append(item)
                print("task1 appended to list:", item)
            time.sleep(10)  # Sleep for 10 seconds

    def task2(self):
        while not self.stop_requested:
            with self.lock:
                if self.shared_list:
                    item = self.shared_list.pop(0)
                    print(f"task2 processed: {item}")
            time.sleep(20)  # Sleep for 20 seconds

    def main(self):
        t1 = threading.Thread(target=self.task1)
        t2 = threading.Thread(target=self.task2)

        t1.start()
        t2.start()

        win32event.WaitForSingleObject(self.hWaitStop, win32event.INFINITE)
        self.stop_requested = True

        t1.join()
        t2.join()

if __name__ == '__main__':
    win32serviceutil.HandleCommandLine(MyService)
